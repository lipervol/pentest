#!/bin/python
#!coding:UTF-8
import sys,socket,threading
def receive_from(connection):
	buffer=""
	connection.settimeout(0.5)
	try:
		while True:
			data=connection.recv(4096)
			if not data:
				break
			buffer+=data
	except:
		pass
	return buffer
def target_handler(client_socket,target_host,target_port):
	target_socket=socket.socket()
	target_socket.connect((target_host,target_port))
	while True:
		datas_client=receive_from(client_socket)
		if len(datas_client):
			print '[<==]receive datas from client,size:%d'%(len(datas_client))
			target_socket.send(datas_client)
			print '[==>]send to target'
		datas_target=receive_from(target_socket)
		if len(datas_target):
			print '[<==]receive datas from target,size:%d'%(len(datas_target))
			client_socket.send(datas_target)
			print '[==>]send to client'
		if not len(datas_client) or not len(datas_target):
			client_socket.close()
			target_socket.close()
			print '[***]no more datas'
			break
def server_loop(local_host,local_port,target_host,target_port):
	host=socket.socket()
	host.bind((local_host,local_port))
	host.listen(5)
	print '[***]runing on %s:%d'%(local_host,local_port)
	while True:
		client_socket,client_addr=host.accept()
		print '[==>]get from %s:%d'%(client_addr[0],client_addr[1])
		target_loop=threading.Thread(target=target_handler,args=(client_socket,target_host,target_port))
		target_loop.start()
def main():
	local_host=sys.argv[1]
	local_port=int(sys.argv[2])
	target_host=sys.argv[3]
	target_port=int(sys.argv[4])
	server_loop(local_host,local_port,target_host,target_port)
main()
